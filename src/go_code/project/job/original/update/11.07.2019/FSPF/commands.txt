docker run -it -v $PWD:/mnt sconecuratedimages/crosscompilers:scone

mkdir -p /example
mkdir -p /mnt/authenticated/
mkdir -p /mnt/encrypted/
cd /example
mkdir -p .original

scone fspf create fspf.pb
scone fspf create authenticated.pb
scone fspf create encrypted.pb

# add protection regions
scone fspf addr fspf.pb / -e --ephemeral
scone fspf addr authenticated.pb /mnt/authenticated -a --kernel /mnt/authenticated
scone fspf addr encrypted.pb /mnt/encrypted -e --kernel /mnt/encrypted

# add files

# enclave program should expect the files (directories) found by the client in ./original in /mnt/authenticated
scone fspf addf authenticated.pb /mnt/authenticated ./original

# enclave program should expect the files (directories) found by the client in ./original in encrypted form in /mnt/encrypted
# the client will write the encrypted files to ./mnt/encrypted
scone fspf addf encrypted.pb /mnt/encrypted ./original ./mnt/encrypted
encrypted_key=`scone fspf encrypt encrypted.pb | awk '{print $11}'`

echo "encrypted.pb key: ${encrypted_key}"
scone fspf addfspf fspf.pb authenticated.pb
scone fspf addfspf fspf.pb encrypted.pb ${encrypted_key}
cat > example.c << EOF
#include <stdio.h>

int main() {
    FILE *fp = fopen("/mnt/authenticated/hello", "w");
    fprintf(fp, "hello world\n");
    fclose(fp);

    fp = fopen("/mnt/encrypted/hello", "w");
    fprintf(fp, "hello world\n");
    fclose(fp);
}
EOF
scone gcc example.c -o sgxex
cat > /etc/sgx-musl.conf << EOF
Q 4
e -1 0 0
s -1 0 0
e -1 1 0
s -1 1 0
e -1 2 0
s -1 2 0
e -1 3 0
s -1 3 0
EOF
SCONE_FSPF=fspf.pb ./sgxex
cat /mnt/authenticated/hello
cat /mnt/encrypted/hello 
cat > cat.c << EOF
#include <stdio.h>

int main() {
    char buf[80];
    FILE *fp = fopen("/mnt/authenticated/hello", "r");
    fgets(buf, sizeof(buf), fp);
    fclose(fp);
    printf("read: '%s'\n", buf);

    fp = fopen("/mnt/encrypted/hello", "r");
    fgets(buf, sizeof(buf), fp);
    fclose(fp);
    printf("read: '%s'\n", buf);
}
EOF

scone gcc cat.c -o native_cat
./native_cat
scone gcc cat.c -o sgxcat
SCONE_FSPF=fspf.pb ./sgxcat
exit
exit
